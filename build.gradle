plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.permissions'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'org.modelmapper:modelmapper:2.4.4'
    implementation 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	implementation 'org.mapstruct:mapstruct:1.6.2'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

task upContainer {
    doLast {
        def containerName = "dg-postgress"

        try {
            println "Verificando estado de Podman machine..."
            exec {
                commandLine "podman", "machine", "start"
                ignoreExitValue = true
            }
            def containerStatus = new ByteArrayOutputStream()
            exec {
                commandLine "podman", "ps", "--quiet", "--filter", "name=${containerName}"
                standardOutput = containerStatus
                ignoreExitValue = true
            }

            if (containerStatus.toString().trim().isEmpty()) {
                println "El contenedor ${containerName} no está corriendo. Iniciándolo..."
                exec {
                    commandLine "podman", "start", containerName
                }
            } else {
                println "El contenedor ${containerName} ya está corriendo."
            }
        } catch (Exception e) {
            println "Error ejecutando comandos Podman: ${e.message}"
            throw e
        }
        println "Termino la tarea upContainer"
    }
}

task runApp(type: JavaExec) {
    dependsOn upContainer
    main = 'com.permissions.PermissionsApplication'
    classpath = sourceSets.main.runtimeClasspath
    args = []
    jvmArgs = ['-Duser.timezone=UTC']
}

tasks.named('test') {
	useJUnitPlatform()
}

